// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_gen.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Worldgen {

  /// <summary>Holder for reflection information generated from world_gen.proto</summary>
  public static partial class WorldGenReflection {

    #region Descriptor
    /// <summary>File descriptor for world_gen.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorldGenReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg93b3JsZF9nZW4ucHJvdG8SCHdvcmxkZ2VuIiAKCFZlY3RvcjJfEgkKAXgY",
            "ASABKAISCQoBeRgCIAEoAiIrCghWZWN0b3IzXxIJCgF4GAEgASgCEgkKAXkY",
            "AiABKAISCQoBehgDIAEoAiJoCgpNYXBSZXF1ZXN0Eg0KBXNjYWxlGAEgASgC",
            "EhEKCWJsb2Nrc194ehgCIAMoBRIQCgh0ZXhfc2l6ZRgDIAEoBRImCgpibG9j",
            "a19zaXplGAQgASgLMhIud29ybGRnZW4uVmVjdG9yM18iaAoIVHJlZURhdGES",
            "HwoDcG9zGAEgASgLMhIud29ybGRnZW4uVmVjdG9yM18SHwoDcm90GAIgASgL",
            "MhIud29ybGRnZW4uVmVjdG9yM18SDAoEdHlwZRgDIAEoBRIMCgRzZWVkGAQg",
            "ASgFImYKBU1lc2hfEgoKAmlkGAEgASgFEiEKBXZlcnRzGAIgAygLMhIud29y",
            "bGRnZW4uVmVjdG9yM18SHwoDdXZzGAMgAygLMhIud29ybGRnZW4uVmVjdG9y",
            "Ml8SDQoFZmFjZXMYBCADKAUiWQoEUHJvcBIPCgdtZXNoX2lkGAEgASgFEh8K",
            "A3BvcxgCIAEoCzISLndvcmxkZ2VuLlZlY3RvcjNfEh8KA3JvdBgDIAEoCzIS",
            "LndvcmxkZ2VuLlZlY3RvcjNfIt8BCghNYXBCbG9jaxIXCg9oZWlnaHRtYXBf",
            "c2hhcGUYASADKAUSEQoJaGVpZ2h0bWFwGAIgAygCEhQKDGJpb21lc19zaGFw",
            "ZRgDIAMoBRIOCgZiaW9tZXMYBCADKAISEQoJc2VhX2xldmVsGAUgASgCEh8K",
            "A3BvcxgGIAEoCzISLndvcmxkZ2VuLlZlY3RvcjNfEgsKA2lkeBgHIAMoBRIh",
            "CgV0cmVlcxgIIAMoCzISLndvcmxkZ2VuLlRyZWVEYXRhEh0KBXByb3BzGAkg",
            "AygLMg4ud29ybGRnZW4uUHJvcCJOCgdNYXBEYXRhEh8KBm1lc2hlcxgBIAMo",
            "CzIPLndvcmxkZ2VuLk1lc2hfEiIKBmJsb2NrcxgKIAMoCzISLndvcmxkZ2Vu",
            "Lk1hcEJsb2NrIk8KD1NpbXVsYXRpb25GcmFtZRIQCghodW1pZGl0eRgBIAMo",
            "AhIVCg1wcmVjaXBpdGF0aW9uGAIgAygCEhMKC3RlbXBlcmF0dXJlGAMgAygC",
            "Ik4KDlNpbXVsYXRpb25EYXRhEhEKCXNpbV9zaGFwZRgBIAMoBRIpCgZmcmFt",
            "ZXMYCiADKAsyGS53b3JsZGdlbi5TaW11bGF0aW9uRnJhbWUyPwoIV29ybGRH",
            "ZW4SMwoGR2V0TWFwEhQud29ybGRnZW4uTWFwUmVxdWVzdBoRLndvcmxkZ2Vu",
            "Lk1hcERhdGEiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.Vector2_), global::Worldgen.Vector2_.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.Vector3_), global::Worldgen.Vector3_.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.MapRequest), global::Worldgen.MapRequest.Parser, new[]{ "Scale", "BlocksXz", "TexSize", "BlockSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.TreeData), global::Worldgen.TreeData.Parser, new[]{ "Pos", "Rot", "Type", "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.Mesh_), global::Worldgen.Mesh_.Parser, new[]{ "Id", "Verts", "Uvs", "Faces" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.Prop), global::Worldgen.Prop.Parser, new[]{ "MeshId", "Pos", "Rot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.MapBlock), global::Worldgen.MapBlock.Parser, new[]{ "HeightmapShape", "Heightmap", "BiomesShape", "Biomes", "SeaLevel", "Pos", "Idx", "Trees", "Props" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.MapData), global::Worldgen.MapData.Parser, new[]{ "Meshes", "Blocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.SimulationFrame), global::Worldgen.SimulationFrame.Parser, new[]{ "Humidity", "Precipitation", "Temperature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Worldgen.SimulationData), global::Worldgen.SimulationData.Parser, new[]{ "SimShape", "Frames" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Vector2_ : pb::IMessage<Vector2_> {
    private static readonly pb::MessageParser<Vector2_> _parser = new pb::MessageParser<Vector2_>(() => new Vector2_());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2_> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2_() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2_(Vector2_ other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2_ Clone() {
      return new Vector2_(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2_ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2_ other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3_ : pb::IMessage<Vector3_> {
    private static readonly pb::MessageParser<Vector3_> _parser = new pb::MessageParser<Vector3_>(() => new Vector3_());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3_> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3_() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3_(Vector3_ other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3_ Clone() {
      return new Vector3_(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3_ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3_ other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRequest : pb::IMessage<MapRequest> {
    private static readonly pb::MessageParser<MapRequest> _parser = new pb::MessageParser<MapRequest>(() => new MapRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequest(MapRequest other) : this() {
      scale_ = other.scale_;
      blocksXz_ = other.blocksXz_.Clone();
      texSize_ = other.texSize_;
      BlockSize = other.blockSize_ != null ? other.BlockSize.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRequest Clone() {
      return new MapRequest(this);
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 1;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "blocks_xz" field.</summary>
    public const int BlocksXzFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_blocksXz_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> blocksXz_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BlocksXz {
      get { return blocksXz_; }
    }

    /// <summary>Field number for the "tex_size" field.</summary>
    public const int TexSizeFieldNumber = 3;
    private int texSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TexSize {
      get { return texSize_; }
      set {
        texSize_ = value;
      }
    }

    /// <summary>Field number for the "block_size" field.</summary>
    public const int BlockSizeFieldNumber = 4;
    private global::Worldgen.Vector3_ blockSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Worldgen.Vector3_ BlockSize {
      get { return blockSize_; }
      set {
        blockSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Scale != other.Scale) return false;
      if(!blocksXz_.Equals(other.blocksXz_)) return false;
      if (TexSize != other.TexSize) return false;
      if (!object.Equals(BlockSize, other.BlockSize)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      hash ^= blocksXz_.GetHashCode();
      if (TexSize != 0) hash ^= TexSize.GetHashCode();
      if (blockSize_ != null) hash ^= BlockSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Scale != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Scale);
      }
      blocksXz_.WriteTo(output, _repeated_blocksXz_codec);
      if (TexSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TexSize);
      }
      if (blockSize_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BlockSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Scale != 0F) {
        size += 1 + 4;
      }
      size += blocksXz_.CalculateSize(_repeated_blocksXz_codec);
      if (TexSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TexSize);
      }
      if (blockSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRequest other) {
      if (other == null) {
        return;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      blocksXz_.Add(other.blocksXz_);
      if (other.TexSize != 0) {
        TexSize = other.TexSize;
      }
      if (other.blockSize_ != null) {
        if (blockSize_ == null) {
          blockSize_ = new global::Worldgen.Vector3_();
        }
        BlockSize.MergeFrom(other.BlockSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Scale = input.ReadFloat();
            break;
          }
          case 18:
          case 16: {
            blocksXz_.AddEntriesFrom(input, _repeated_blocksXz_codec);
            break;
          }
          case 24: {
            TexSize = input.ReadInt32();
            break;
          }
          case 34: {
            if (blockSize_ == null) {
              blockSize_ = new global::Worldgen.Vector3_();
            }
            input.ReadMessage(blockSize_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TreeData : pb::IMessage<TreeData> {
    private static readonly pb::MessageParser<TreeData> _parser = new pb::MessageParser<TreeData>(() => new TreeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeData(TreeData other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Rot = other.rot_ != null ? other.Rot.Clone() : null;
      type_ = other.type_;
      seed_ = other.seed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeData Clone() {
      return new TreeData(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Worldgen.Vector3_ pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Worldgen.Vector3_ Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rot" field.</summary>
    public const int RotFieldNumber = 2;
    private global::Worldgen.Vector3_ rot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Worldgen.Vector3_ Rot {
      get { return rot_; }
      set {
        rot_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 4;
    private int seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rot, other.Rot)) return false;
      if (Type != other.Type) return false;
      if (Seed != other.Seed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (rot_ != null) hash ^= Rot.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Seed != 0) hash ^= Seed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (rot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rot);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Seed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rot);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Seed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreeData other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Worldgen.Vector3_();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.rot_ != null) {
        if (rot_ == null) {
          rot_ = new global::Worldgen.Vector3_();
        }
        Rot.MergeFrom(other.Rot);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Seed != 0) {
        Seed = other.Seed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Worldgen.Vector3_();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            if (rot_ == null) {
              rot_ = new global::Worldgen.Vector3_();
            }
            input.ReadMessage(rot_);
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Seed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mesh_ : pb::IMessage<Mesh_> {
    private static readonly pb::MessageParser<Mesh_> _parser = new pb::MessageParser<Mesh_>(() => new Mesh_());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mesh_> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh_() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh_(Mesh_ other) : this() {
      id_ = other.id_;
      verts_ = other.verts_.Clone();
      uvs_ = other.uvs_.Clone();
      faces_ = other.faces_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh_ Clone() {
      return new Mesh_(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "verts" field.</summary>
    public const int VertsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Worldgen.Vector3_> _repeated_verts_codec
        = pb::FieldCodec.ForMessage(18, global::Worldgen.Vector3_.Parser);
    private readonly pbc::RepeatedField<global::Worldgen.Vector3_> verts_ = new pbc::RepeatedField<global::Worldgen.Vector3_>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Worldgen.Vector3_> Verts {
      get { return verts_; }
    }

    /// <summary>Field number for the "uvs" field.</summary>
    public const int UvsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Worldgen.Vector2_> _repeated_uvs_codec
        = pb::FieldCodec.ForMessage(26, global::Worldgen.Vector2_.Parser);
    private readonly pbc::RepeatedField<global::Worldgen.Vector2_> uvs_ = new pbc::RepeatedField<global::Worldgen.Vector2_>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Worldgen.Vector2_> Uvs {
      get { return uvs_; }
    }

    /// <summary>Field number for the "faces" field.</summary>
    public const int FacesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_faces_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> faces_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Faces {
      get { return faces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mesh_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mesh_ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!verts_.Equals(other.verts_)) return false;
      if(!uvs_.Equals(other.uvs_)) return false;
      if(!faces_.Equals(other.faces_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= verts_.GetHashCode();
      hash ^= uvs_.GetHashCode();
      hash ^= faces_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      verts_.WriteTo(output, _repeated_verts_codec);
      uvs_.WriteTo(output, _repeated_uvs_codec);
      faces_.WriteTo(output, _repeated_faces_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += verts_.CalculateSize(_repeated_verts_codec);
      size += uvs_.CalculateSize(_repeated_uvs_codec);
      size += faces_.CalculateSize(_repeated_faces_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mesh_ other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      verts_.Add(other.verts_);
      uvs_.Add(other.uvs_);
      faces_.Add(other.faces_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            verts_.AddEntriesFrom(input, _repeated_verts_codec);
            break;
          }
          case 26: {
            uvs_.AddEntriesFrom(input, _repeated_uvs_codec);
            break;
          }
          case 34:
          case 32: {
            faces_.AddEntriesFrom(input, _repeated_faces_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Prop : pb::IMessage<Prop> {
    private static readonly pb::MessageParser<Prop> _parser = new pb::MessageParser<Prop>(() => new Prop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Prop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop(Prop other) : this() {
      meshId_ = other.meshId_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Rot = other.rot_ != null ? other.Rot.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prop Clone() {
      return new Prop(this);
    }

    /// <summary>Field number for the "mesh_id" field.</summary>
    public const int MeshIdFieldNumber = 1;
    private int meshId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeshId {
      get { return meshId_; }
      set {
        meshId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Worldgen.Vector3_ pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Worldgen.Vector3_ Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rot" field.</summary>
    public const int RotFieldNumber = 3;
    private global::Worldgen.Vector3_ rot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Worldgen.Vector3_ Rot {
      get { return rot_; }
      set {
        rot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Prop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Prop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeshId != other.MeshId) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rot, other.Rot)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MeshId != 0) hash ^= MeshId.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (rot_ != null) hash ^= Rot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeshId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MeshId);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (rot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeshId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeshId);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Prop other) {
      if (other == null) {
        return;
      }
      if (other.MeshId != 0) {
        MeshId = other.MeshId;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Worldgen.Vector3_();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.rot_ != null) {
        if (rot_ == null) {
          rot_ = new global::Worldgen.Vector3_();
        }
        Rot.MergeFrom(other.Rot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MeshId = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Worldgen.Vector3_();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            if (rot_ == null) {
              rot_ = new global::Worldgen.Vector3_();
            }
            input.ReadMessage(rot_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapBlock : pb::IMessage<MapBlock> {
    private static readonly pb::MessageParser<MapBlock> _parser = new pb::MessageParser<MapBlock>(() => new MapBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock(MapBlock other) : this() {
      heightmapShape_ = other.heightmapShape_.Clone();
      heightmap_ = other.heightmap_.Clone();
      biomesShape_ = other.biomesShape_.Clone();
      biomes_ = other.biomes_.Clone();
      seaLevel_ = other.seaLevel_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      idx_ = other.idx_.Clone();
      trees_ = other.trees_.Clone();
      props_ = other.props_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock Clone() {
      return new MapBlock(this);
    }

    /// <summary>Field number for the "heightmap_shape" field.</summary>
    public const int HeightmapShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_heightmapShape_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> heightmapShape_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeightmapShape {
      get { return heightmapShape_; }
    }

    /// <summary>Field number for the "heightmap" field.</summary>
    public const int HeightmapFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_heightmap_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> heightmap_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Heightmap {
      get { return heightmap_; }
    }

    /// <summary>Field number for the "biomes_shape" field.</summary>
    public const int BiomesShapeFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_biomesShape_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> biomesShape_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BiomesShape {
      get { return biomesShape_; }
    }

    /// <summary>Field number for the "biomes" field.</summary>
    public const int BiomesFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_biomes_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> biomes_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Biomes {
      get { return biomes_; }
    }

    /// <summary>Field number for the "sea_level" field.</summary>
    public const int SeaLevelFieldNumber = 5;
    private float seaLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SeaLevel {
      get { return seaLevel_; }
      set {
        seaLevel_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 6;
    private global::Worldgen.Vector3_ pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Worldgen.Vector3_ Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_idx_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> idx_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Idx {
      get { return idx_; }
    }

    /// <summary>Field number for the "trees" field.</summary>
    public const int TreesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Worldgen.TreeData> _repeated_trees_codec
        = pb::FieldCodec.ForMessage(66, global::Worldgen.TreeData.Parser);
    private readonly pbc::RepeatedField<global::Worldgen.TreeData> trees_ = new pbc::RepeatedField<global::Worldgen.TreeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Worldgen.TreeData> Trees {
      get { return trees_; }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Worldgen.Prop> _repeated_props_codec
        = pb::FieldCodec.ForMessage(74, global::Worldgen.Prop.Parser);
    private readonly pbc::RepeatedField<global::Worldgen.Prop> props_ = new pbc::RepeatedField<global::Worldgen.Prop>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Worldgen.Prop> Props {
      get { return props_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heightmapShape_.Equals(other.heightmapShape_)) return false;
      if(!heightmap_.Equals(other.heightmap_)) return false;
      if(!biomesShape_.Equals(other.biomesShape_)) return false;
      if(!biomes_.Equals(other.biomes_)) return false;
      if (SeaLevel != other.SeaLevel) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if(!idx_.Equals(other.idx_)) return false;
      if(!trees_.Equals(other.trees_)) return false;
      if(!props_.Equals(other.props_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heightmapShape_.GetHashCode();
      hash ^= heightmap_.GetHashCode();
      hash ^= biomesShape_.GetHashCode();
      hash ^= biomes_.GetHashCode();
      if (SeaLevel != 0F) hash ^= SeaLevel.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      hash ^= idx_.GetHashCode();
      hash ^= trees_.GetHashCode();
      hash ^= props_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heightmapShape_.WriteTo(output, _repeated_heightmapShape_codec);
      heightmap_.WriteTo(output, _repeated_heightmap_codec);
      biomesShape_.WriteTo(output, _repeated_biomesShape_codec);
      biomes_.WriteTo(output, _repeated_biomes_codec);
      if (SeaLevel != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SeaLevel);
      }
      if (pos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pos);
      }
      idx_.WriteTo(output, _repeated_idx_codec);
      trees_.WriteTo(output, _repeated_trees_codec);
      props_.WriteTo(output, _repeated_props_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heightmapShape_.CalculateSize(_repeated_heightmapShape_codec);
      size += heightmap_.CalculateSize(_repeated_heightmap_codec);
      size += biomesShape_.CalculateSize(_repeated_biomesShape_codec);
      size += biomes_.CalculateSize(_repeated_biomes_codec);
      if (SeaLevel != 0F) {
        size += 1 + 4;
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      size += idx_.CalculateSize(_repeated_idx_codec);
      size += trees_.CalculateSize(_repeated_trees_codec);
      size += props_.CalculateSize(_repeated_props_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapBlock other) {
      if (other == null) {
        return;
      }
      heightmapShape_.Add(other.heightmapShape_);
      heightmap_.Add(other.heightmap_);
      biomesShape_.Add(other.biomesShape_);
      biomes_.Add(other.biomes_);
      if (other.SeaLevel != 0F) {
        SeaLevel = other.SeaLevel;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Worldgen.Vector3_();
        }
        Pos.MergeFrom(other.Pos);
      }
      idx_.Add(other.idx_);
      trees_.Add(other.trees_);
      props_.Add(other.props_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            heightmapShape_.AddEntriesFrom(input, _repeated_heightmapShape_codec);
            break;
          }
          case 18:
          case 21: {
            heightmap_.AddEntriesFrom(input, _repeated_heightmap_codec);
            break;
          }
          case 26:
          case 24: {
            biomesShape_.AddEntriesFrom(input, _repeated_biomesShape_codec);
            break;
          }
          case 34:
          case 37: {
            biomes_.AddEntriesFrom(input, _repeated_biomes_codec);
            break;
          }
          case 45: {
            SeaLevel = input.ReadFloat();
            break;
          }
          case 50: {
            if (pos_ == null) {
              pos_ = new global::Worldgen.Vector3_();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 58:
          case 56: {
            idx_.AddEntriesFrom(input, _repeated_idx_codec);
            break;
          }
          case 66: {
            trees_.AddEntriesFrom(input, _repeated_trees_codec);
            break;
          }
          case 74: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapData : pb::IMessage<MapData> {
    private static readonly pb::MessageParser<MapData> _parser = new pb::MessageParser<MapData>(() => new MapData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapData(MapData other) : this() {
      meshes_ = other.meshes_.Clone();
      blocks_ = other.blocks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapData Clone() {
      return new MapData(this);
    }

    /// <summary>Field number for the "meshes" field.</summary>
    public const int MeshesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Worldgen.Mesh_> _repeated_meshes_codec
        = pb::FieldCodec.ForMessage(10, global::Worldgen.Mesh_.Parser);
    private readonly pbc::RepeatedField<global::Worldgen.Mesh_> meshes_ = new pbc::RepeatedField<global::Worldgen.Mesh_>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Worldgen.Mesh_> Meshes {
      get { return meshes_; }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Worldgen.MapBlock> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(82, global::Worldgen.MapBlock.Parser);
    private readonly pbc::RepeatedField<global::Worldgen.MapBlock> blocks_ = new pbc::RepeatedField<global::Worldgen.MapBlock>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Worldgen.MapBlock> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!meshes_.Equals(other.meshes_)) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= meshes_.GetHashCode();
      hash ^= blocks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      meshes_.WriteTo(output, _repeated_meshes_codec);
      blocks_.WriteTo(output, _repeated_blocks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += meshes_.CalculateSize(_repeated_meshes_codec);
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapData other) {
      if (other == null) {
        return;
      }
      meshes_.Add(other.meshes_);
      blocks_.Add(other.blocks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            meshes_.AddEntriesFrom(input, _repeated_meshes_codec);
            break;
          }
          case 82: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimulationFrame : pb::IMessage<SimulationFrame> {
    private static readonly pb::MessageParser<SimulationFrame> _parser = new pb::MessageParser<SimulationFrame>(() => new SimulationFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationFrame(SimulationFrame other) : this() {
      humidity_ = other.humidity_.Clone();
      precipitation_ = other.precipitation_.Clone();
      temperature_ = other.temperature_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationFrame Clone() {
      return new SimulationFrame(this);
    }

    /// <summary>Field number for the "humidity" field.</summary>
    public const int HumidityFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_humidity_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> humidity_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Humidity {
      get { return humidity_; }
    }

    /// <summary>Field number for the "precipitation" field.</summary>
    public const int PrecipitationFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_precipitation_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> precipitation_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Precipitation {
      get { return precipitation_; }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_temperature_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> temperature_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Temperature {
      get { return temperature_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!humidity_.Equals(other.humidity_)) return false;
      if(!precipitation_.Equals(other.precipitation_)) return false;
      if(!temperature_.Equals(other.temperature_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= humidity_.GetHashCode();
      hash ^= precipitation_.GetHashCode();
      hash ^= temperature_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      humidity_.WriteTo(output, _repeated_humidity_codec);
      precipitation_.WriteTo(output, _repeated_precipitation_codec);
      temperature_.WriteTo(output, _repeated_temperature_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += humidity_.CalculateSize(_repeated_humidity_codec);
      size += precipitation_.CalculateSize(_repeated_precipitation_codec);
      size += temperature_.CalculateSize(_repeated_temperature_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationFrame other) {
      if (other == null) {
        return;
      }
      humidity_.Add(other.humidity_);
      precipitation_.Add(other.precipitation_);
      temperature_.Add(other.temperature_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            humidity_.AddEntriesFrom(input, _repeated_humidity_codec);
            break;
          }
          case 18:
          case 21: {
            precipitation_.AddEntriesFrom(input, _repeated_precipitation_codec);
            break;
          }
          case 26:
          case 29: {
            temperature_.AddEntriesFrom(input, _repeated_temperature_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimulationData : pb::IMessage<SimulationData> {
    private static readonly pb::MessageParser<SimulationData> _parser = new pb::MessageParser<SimulationData>(() => new SimulationData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Worldgen.WorldGenReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationData(SimulationData other) : this() {
      simShape_ = other.simShape_.Clone();
      frames_ = other.frames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationData Clone() {
      return new SimulationData(this);
    }

    /// <summary>Field number for the "sim_shape" field.</summary>
    public const int SimShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_simShape_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> simShape_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SimShape {
      get { return simShape_; }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Worldgen.SimulationFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(82, global::Worldgen.SimulationFrame.Parser);
    private readonly pbc::RepeatedField<global::Worldgen.SimulationFrame> frames_ = new pbc::RepeatedField<global::Worldgen.SimulationFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Worldgen.SimulationFrame> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!simShape_.Equals(other.simShape_)) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= simShape_.GetHashCode();
      hash ^= frames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      simShape_.WriteTo(output, _repeated_simShape_codec);
      frames_.WriteTo(output, _repeated_frames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += simShape_.CalculateSize(_repeated_simShape_codec);
      size += frames_.CalculateSize(_repeated_frames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationData other) {
      if (other == null) {
        return;
      }
      simShape_.Add(other.simShape_);
      frames_.Add(other.frames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            simShape_.AddEntriesFrom(input, _repeated_simShape_codec);
            break;
          }
          case 82: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
